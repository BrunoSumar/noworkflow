# Copyright (c) 2019 Universidade Federal Fluminense (UFF)
# Copyright (c) 2019 Polytechnic Institute of New York University.
# This file is part of noWorkflow.
# Please, consult the license terms in the LICENSE file.
"""Define code component constants"""


# Code Component

ANNOTATION = "annotation"
#  def visit_annassign
ARGUMENTS = "arguments"
#  def process_parameters
ASSERT = "assert"
#  def visit_Assert
ASSIGN = "assign"
#  def visit_assign
ANN_ASSIGN = "ann_assign"
#  def visit_annassign
ANN_TARGET = "ann_target"
#  def visit_annassign
ASYNC_FOR = "async_for"
#  def visit_AsyncFor
ASYNC_WITH = "async_with"
#  def visit_AsyncWith
AUG_ASSIGN = "aug_assign"
#  def visit_augassign
BREAK = "break"
#  def visit_Break
CALL = "call"
#  def visit_Exec
CLASS_DEF = "class_def"
#  def visit_ClassDef
CONTINUE = "continue"
#  def visit_Continue
DECORATOR = "decorator"
#  def process_decorator
DEFAULT = "default"
#  def process_default
DELETE = "delete"
#  def visit_Delete
EXCEPTION = "exception"
#  def visit_exchandler
EXPR = "expr"
#  def visit_Expr
FOR = "for"
#  def visit_For
FUNCTION_DEF = "function_def"
#  def visit_FunctionDef
FUTURE_IMPORT = "future_import"
#  def process_script
GLOBAL = "global"
#  def visit_Global
IDENTIFIER = "identifier"
#  def visit_FunctionDef
#  def visit_ClassDef
IF = "if"
#  def visit_If
IMPORT = "import"
#  def visit_Import
IMPORT_FROM = "import_from"
#  def visit_ImportFrom
NONLOCAL = "nonlocal"
#  def visit_Nonlocal
PASS = "pass"
#  def visit_Pass
PARAM = "param"
#  def process_arg
PRINT = "print"
#  def visit_Print
RAISE = "raise"
#  def visit_Raise
RETURN = "return"
#  def visit_Return
SYNTAX = "syntax"
#  def create_code_component
TRY = "try"
#  def visit_Try
TRY_EXCEPT = "try_except"
#  def visit_TryExcept
TRY_FINALLY = "try_finally"
#  def visit_TryFinally
WHILE = "while"
#  def visit_While
WITH = "with"
#  def visit_With


# Composition

S_ANNOTATION = "annotation"
S_ARGS = "args"
#  def visit_FunctionDef
#  def visit_ClassDef
M_ARGS = "*args"
#  def process_parameters
M_BASES = "*bases"
#  def visit_ClassDef
M_BODY = "*body"
#  def process_script
#  def process_body
M_DECORATOR_LIST = "*decorator_list"
#  def visit_FunctionDef
#  def visit_ClassDef
M_DEFAULTS = "*defaults"
#  def process_parameters
S_DEST = "dest"
#  def visit_Print
M_FINALBODY = "*finalbody"
#  def visit_Try
#  def visit_TryFinally
M_HANDLERS = "*handlers"
#  def visit_Try
#  def visit_TryExcept
S_ITER = "iter"
#  def visit_For
M_KEYWORDS = "*keywords"
#  def visit_ClassDef
S_KWARG = "kwarg"
#  def process_parameters
M_KWONLYARGS = "*kwonlyargs"
#  def process_parameters
M_KW_DEFAULTS = "*kw_defaults"
#  def process_parameters
S_LOCALS = "locals"
#  def visit_Exect
S_NAME_NODE = "name_node"
#  def visit_FunctionDef
#  def visit_ClassDef
S_NL = "nl"
#  def visit_Print
M_OP_POS = "*op_pos"
#  def create_code_component
M_ORELSE = "*orelse"
#  def visit_For
#  def visit_While
#  def visit_If
#  def visit_Try
S_SIMPLE = "simple"
#  def visit_annassign
S_TARGET = "target"
#  def visit_augassign
#  def visit_annassign
#  def visit_For
M_TARGETS = "*targets"
#  def visit_assign
S_TEST = "test"
#  def visit_While
#  def visit_If
S_VALUE = "value"
#  def visit_Return
#  def visit_assign
#  def visit_augassign
#  def visit_annassign
#  def visit_Expr
M_VALUES = "*values"
#  def visit_Print
S_VARARG = "vararg"
#  def process_parameters
